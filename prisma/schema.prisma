// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  provider          String
  providerAccountId String
  afiliateAccountId String?
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerAccountId, userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(uuid())
  token   String   @unique
  expires DateTime
  userId  String   @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token, userId])
}

model Address {
  id           String       @id @default(uuid())
  userId       String?
  barbershopId String?
  neighborhood String
  number       Int
  street       String
  state        String
  city         String
  zipCode      String       @db.VarChar(10)
  Barbershop   Barbershop[]
  User         User?        @relation(fields: [userId], references: [id])
}

model User {
  id                String              @id @default(uuid())
  name              String?
  email             String?             @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  type              String
  phone             String?
  address           Address[]
  accounts          Account[]
  sessions          Session[]
  bookings          Booking[]
  ratings           Rating[]
  verificationToken VerificationToken[]
  barbershop        Barbershop[]
  Favorite          Favorite[]
}

model Barbershop {
  id         String     @id @default(uuid())
  name       String
  imageUrl   String
  phone      String?
  workers    Worker[]
  bookings   Booking[]
  services   Service[]
  address    Address?   @relation(fields: [addressId], references: [id])
  addressId  String?
  User       User?      @relation(fields: [userId], references: [id])
  appraiser  Int?       @default(0)
  totalStars Int?       @default(0)
  rating     Float?     @default(0)
  userId     String?
  Favorite   Favorite[]
  Rating     Rating[]
}

model Booking {
  id           String     @id @default(uuid())
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  serviceId    String
  service      Service    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  date         DateTime   @db.Timestamp
}

model Service {
  id           String     @id @default(uuid())
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  name         String
  description  String
  price        Decimal    @db.Decimal(10, 2)
  imageUrl     String?
  category     String
  time         Int
  bookings     Booking[]
}

model Worker {
  id           String @id @default(uuid())
  barbershopId String
  name         String
  imageUrl     String

  barbershop Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
}

model Rating {
  id           String  @id @default(uuid())
  userId       String
  barbershopId String
  comment      String?
  appraiser    Int     @default(0)
  rating       Int     @default(0)

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  barbershop Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
}

model Favorite {
  id           String     @id @default(uuid())
  userId       String
  barbershopId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)

  @@unique([userId, barbershopId])
}
